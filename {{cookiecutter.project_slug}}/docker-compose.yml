services:
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - .:/app
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network

  redis:
    image: redis:6-alpine
    expose:
      - 6379
    volumes:
      - redis_data:/data
    networks:
      - app-network

  server:
    build: .
    env_file:
      - $ENV
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: >
      bash -c "cd /app
      && python manage.py migrate
      && python manage.py collectstatic --no-input
      && python manage.py runserver_plus --print-sql 0.0.0.0:8000"
    depends_on:
      - db
      - redis
    networks:
      app-network:
        aliases:
          - server

  celery:
    build: .
    restart: always
    command: >
      bash -c "cd /app && celery -A {{cookiecutter.project_slug}} worker -l info"
    volumes:
      - .:/app
    env_file:
      - $ENV
    links:
      - redis
    depends_on:
      - db
      - redis
      - server
    networks:
      - app-network

  celery-beat:
    build: .
    restart: always
    command: >
      bash -c "cd /app
      && celery -A {{cookiecutter.project_slug}} beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - .:/app
    env_file:
      - $ENV
    depends_on:
      - db
      - redis
      - server
    networks:
      - app-network

  flower:
    image: mher/flower:0.9.5
    env_file:
      - $ENV
    environment:
      - CELERY_BROKER_URL=$REDIS_BROKER_URL
      - FLOWER_PORT=8888
    ports:
      - "8888:8888"
    depends_on:
      - celery
      - redis

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
